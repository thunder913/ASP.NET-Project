@model WaiterViewModel

<link href="~/css/waiterIndex.css" rel="stylesheet" />
<h2>New orders:</h2>
<div class="table-responsive fixed-table-body newOrders">
    <table id="ordersTable" class="table table-striped table-bordered">
        <thead>
            <tr>
                <th class="th-sm">
                    Table
                </th>
                <th class="th-sm">
                    Date
                </th>
                <th class="th-sm">
                    Client Name
                </th>
                <th class="th-sm">
                    Status
                </th>
                <th class="th-sm">
                    Price
                </th>
                <th class="th-sm" width="160px">
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.NewOrders)
            {
                <tr id="@item.Id">
                    <th class="th-sm">
                        @item.TableNumber
                    </th>
                    <th class="th-sm">
                        @item.Date.ToLocalTime()
                    </th>
                    <th class="th-sm">
                        @item.FirstName @item.LastName
                    </th>
                    <th class="th-sm">
                        @item.Status
                    </th>
                    <th class="th-sm">
                        @item.Price.ToString("0.00")$
                    </th>
                    <th class="th-sm">
                        <form method="post" style="display: inline-block;">
                            <input name="id" value="@item.Id" hidden />
                            <button class="btn btn-success accept">Accept</button>
                        </form>
                        <form method="get" asp-controller="Order" asp-action="Index" asp-route-id="@item.Id" style='display:inline-block;'>
                            <button class="btn btn-info">Info</button>
                        </form>
                    </th>
                </tr>
            }
        </tbody>
    </table>
</div>

<h2>Pickup</h2>

<div class="table-responsive pickupTable col-md-6" style="display: inline-block;">
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th class="th-sm">
                    Count
                </th>
                <th class="th-sm">
                    Item
                </th>
                <th class="th-sm">
                    Table
                </th>
                <th class="th-sm">
                    Client
                </th>
                <th class="th-sm">
                    Action
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.PickupItems)
            {
                <tr data-id="@item.Id">
                    <th class="th-sm count">
                        @item.Count
                    </th>
                    <th class="th-sm">
                        @item.Name
                    </th>
                    <th class="th-sm">
                        @item.TableNumber
                    </th>
                    <th class="th-sm">
                        @item.ClientName
                    </th>
                    <th class="th-sm">
                        <form method="post">
                            <input name="id" value="@item.Id" hidden />
                            <button class="btn btn-success pickupDone">Done</button>
                        </form>
                    </th>
                </tr>
            }
        </tbody>
    </table>
</div>

<div class="table-responsive activeTable col-md-6" style="float: right; display: inline;">
    <h2>Active orders</h2>
    <table class="table table-striped table-bordered">
        <thead>
            <tr>
                <th class="th-sm">
                    Table
                </th>
                <th class="th-sm">
                    Status
                </th>
                <th class="th-sm">
                    Paid
                </th>
                <th class="th-sm" style="width: 110px;">
                    Completed
                </th>
                <th class="th-sm">
                    Cooked%
                </th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.ActiveOrders)
            {
            <tr id="@item.Id">
                <th class="th-sm">
                    @item.TableNumber
                </th>
                <th class="th-sm">
                    @item.ProcessType
                </th>
                <th class="th-sm">
                    @item.IsPaid
                </th>
                <th class="th-sm">
                    <form method="post">
                        <input name="id" value="@item.Id" hidden />
                        <button class="btn btn-success finishOrder">Done</button>
                    </form>
                </th>
                <th class="th-sm">
                    @item.ReadyPercent%
                </th>
            </tr>
            }
        </tbody>
    </table>
</div>


@section Scripts{
    <script src="~/lib/signalR/dist/browser/signalr.js"></script>   
    <script src="~/js/waiterIndex.js"></script>
    
    <script>
        var connection = new signalR.HubConnectionBuilder()
            .withUrl("/orderHub")
            .build();

        connection.on("NewPickup", function (item) {
            let tbodyElement = document.querySelector(".pickupTable tbody");
            let tBodyElements = tbodyElement.querySelectorAll('tr');
            for (var i = 0; i < tBodyElements.length; i++) {
                let element = tBodyElements[i];
                if (element.dataset.id === item.id) {
                    element.querySelector('.count').innerHTML = item.count;
                    return;
                }
            }
            let trElement = getTrElement(item);
            tbodyElement.appendChild(trElement);
        });

        connection.on("AddItemsToPickup", function (item) {
            let order = item.order;

            let dateUtc = new Date(Date.parse(order.date));
            let userTimeZoneOffset = new Date().getTimezoneOffset();
            dateUtc.setMinutes(dateUtc.getMinutes() - userTimeZoneOffset);
            let date = dateUtc.toLocaleString();

            let orderBody = document.querySelector('#ordersTable tbody');
            let trHtml = `<tr id="${order.id}">
                    <th class="th-sm">
                        ${order.tableNumber}
                    </th>
                    <th class="th-sm">
                        ${date}
                    </th>
                    <th class="th-sm">
                        ${order.fullName}
                    </th>
                    <th class="th-sm">
                        ${order.statusName}
                    </th>
                    <th class="th-sm">
                        ${order.price.toFixed(2)}
                    </th>
                    <th class="th-sm">
                        <form method="post" style="display: inline-block;">
                            <input name="id" value="${order.id}" hidden />
                            <button class="btn btn-success accept">Accept</button>
                        </form>
                        <form method="get" action="/Order/Index/${order.id}" style='display:inline-block;'>
                            <button class="btn btn-info">Info</button>
                        </form>
                    </th>
                </tr>`

            orderBody.insertAdjacentHTML('beforeend', trHtml);
        })

        connection.on("NewOrderCookedPercent", function (item) {
            var trElement = document.querySelector(`.activeTable tr[id='${item.orderId}']`);
            trElement.querySelectorAll('th')[4].innerHTML = `${item.cookedPercent}%`;
        })

        connection.on("RemoveNewWaiterOrder", function (order) {
            let elementToRemove = document.querySelector(`.newOrders #${order.orderId}`);
            elementToRemove.remove();
        })

        $(".pickupTable").on('click', '.pickupDone', function (e) {
            e.preventDefault();
            let form = e.target.parentElement;
            let id = form.querySelector('input[name=id]').value;
            connection.invoke("FinishPickupItem", id);
            successNotification('Successfully picked the item up!');
            form.parentElement.parentElement.remove();
        });

        $('#ordersTable').on('click', '.accept', function (e) {
            e.preventDefault();
            var form = e.target.parentElement;
            var id = form.querySelector('input[name=id]').value;
            let item = { newProcessingTypeId: 1, orderId: id, oldProcessingType: 'Pending' };
            connection.invoke('AcceptOrder', item);
            successNotification('You successfully accepted the order!');
            form.parentElement.parentElement.remove();
        })

        connection.on('UpdateTableStatus', function (item) {
            let trElement = document.querySelector(`.activeTable tr[id='${item.id}']`);
            trElement.querySelectorAll('th')[1].innerHTML = item.processType;
        })

        connection.on('NewActiveTable', function (item) {
            let tbodyElement = document.querySelector('.activeTable tbody');
            let th1 = getThElement(item.tableNumber);
            let th2 = getThElement(item.processType);
            let th3 = getThElement(item.isPaid);

            let th4 = document.createElement('th');
            th1.classList.add('th-sm')
            let formElement = document.createElement('form');

            let inputElement = document.createElement('input');
            inputElement.name = 'id';
            inputElement.value = item.id;
            inputElement.hidden = true;
            let buttonElement = document.createElement('button');
            buttonElement.classList.add('btn', 'btn-success', 'pickupDone');
            buttonElement.innerHTML = 'Done';

            formElement.appendChild(inputElement);
            formElement.appendChild(buttonElement);
            th4.appendChild(formElement);

            let th5 = getThElement(`${item.readyPercent}%`);

            let trElement = document.createElement('tr');
            trElement.id = item.id;
            trElement.appendChild(th1);
            trElement.appendChild(th2);
            trElement.appendChild(th3);
            trElement.appendChild(th4);
            trElement.appendChild(th5);

            // TODO make the paid with some sort of checkmark

            tbodyElement.appendChild(trElement);

        })

        connection.start().catch(function (err) {
            return console.error(err.toString());
        });



        function getTrElement(item) {
            let trElement = document.createElement('tr');
            trElement.dataset.id = item.id;
            let th1 = getThElement(item.count);
            th1.classList.add('count');
            let th2 = getThElement(item.name);
            let th3 = getThElement(item.tableNumber);
            let th4 = getThElement(item.clientName);

            let th5 = document.createElement('th');
            let formElement = document.createElement('form');
            let inputElement = document.createElement('input');
            inputElement.name = 'id';
            inputElement.defaultValue = item.id;
            inputElement.hidden = true;
            let buttonElement = document.createElement('button');
            buttonElement.classList.add('btn', 'btn-success', 'pickupDone');
            buttonElement.innerHTML = 'Done';

            formElement.appendChild(inputElement);
            formElement.appendChild(buttonElement);
            th5.appendChild(formElement);

            trElement.appendChild(th1);
            trElement.appendChild(th2);
            trElement.appendChild(th3);
            trElement.appendChild(th4);
            trElement.appendChild(th5);

            return trElement;
        }

        function getThElement(value) {
            let th1 = document.createElement('th');
            th1.classList.add('th-sm')
            th1.innerHTML = value;
            return th1;
        }

    </script>
}
